// Code generated for package deploy by go-bindata DO NOT EDIT. (@generated)
// sources:
// manifests/ccm.yaml
// manifests/coredns_linux.yaml
// manifests/coredns_windows.yaml
// manifests/local-storage_linux.yaml
// manifests/metrics-server_linux/aggregated-metrics-reader.yaml
// manifests/metrics-server_linux/auth-delegator.yaml
// manifests/metrics-server_linux/auth-reader.yaml
// manifests/metrics-server_linux/metrics-apiservice.yaml
// manifests/metrics-server_linux/metrics-server-deployment.yaml
// manifests/metrics-server_linux/metrics-server-service.yaml
// manifests/metrics-server_linux/resource-reader.yaml
// manifests/rolebindings.yaml
// manifests/traefik_linux.yaml
package deploy

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ccmYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x93\x4f\x6b\xf3\x30\x0c\xc6\xef\x81\x7c\x07\xd3\x4b\xe1\x85\xb4\xbc\xb7\x91\xe3\x76\xd8\xbd\xb0\xdd\x15\x5b\x6b\xbd\x3a\x96\x91\xe4\x94\xed\xd3\x8f\x34\x2d\x2b\x24\xeb\xdf\x9b\x88\xa5\xdf\x23\x85\xe7\x81\xe4\xdf\x91\xc5\x53\xac\x0d\x37\x60\x17\x90\x75\x43\xec\xbf\x41\x3d\xc5\xc5\xf6\x49\x16\x9e\x96\xdd\xff\xb2\xd8\xfa\xe8\x6a\xf3\x12\xb2\x28\xf2\x8a\x02\x96\x45\x8b\x0a\x0e\x14\xea\xb2\x30\x26\x42\x8b\xb5\xb1\x81\xb2\xab\x2c\x45\x65\x0a\x01\xb9\x6a\x21\xc2\x1a\xb9\x2c\x38\x07\x94\xba\x2c\x2a\x03\xc9\xbf\x32\xe5\x24\xfb\xb9\xca\x58\x22\x76\x3e\x9e\x2a\xf6\x0f\x8c\x42\x99\x2d\x1e\xdb\x02\x82\xa0\xf4\x75\x87\xdc\x1c\xbf\xae\x51\x0f\x14\x46\x50\x1c\xea\x9c\xdc\xbe\x1e\x6b\xcd\x66\x53\x68\xec\x30\xea\x08\x7d\x4a\x4c\xa0\x76\x73\x1f\x3c\x92\x1b\xaf\x3d\xff\x37\xbf\x91\xb0\x14\x05\xcd\x23\xd0\x61\xb1\x6b\x51\x82\xdc\x79\x3b\xde\x27\x78\xd1\x3f\x2f\xed\xeb\xdd\x5d\x3a\x60\x2d\xe5\x33\xbf\xf6\x5a\x5c\xea\x3d\x2a\x8a\x51\x3b\x0a\xb9\x3d\x63\x83\xdf\x43\x1e\xd8\x1e\xa3\x4b\xe4\x2f\x58\x62\x42\x72\x37\xe1\x92\xaa\x2a\x8b\x07\x52\xf6\xec\xa3\xf3\x71\x7d\x6b\xd8\x28\xe0\x0a\x3f\xf6\xbd\xc7\x93\xcf\x48\xf7\x6d\x13\xf9\xbe\xac\x23\xb9\xf9\x44\xab\x43\xae\x07\xc2\x9b\xf4\x0f\x97\x47\x87\x0e\x49\x60\xb1\x36\xdb\xdc\x60\x25\x5f\xa2\xd8\x96\xc5\x4f\x00\x00\x00\xff\xff\x9f\xdf\x96\x73\x94\x04\x00\x00")

func ccmYamlBytes() ([]byte, error) {
	return bindataRead(
		_ccmYaml,
		"ccm.yaml",
	)
}

func ccmYaml() (*asset, error) {
	bytes, err := ccmYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ccm.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _coredns_linuxYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\xdf\x6f\xdb\xb6\x13\x7f\x0f\x90\xff\x81\xd0\x17\x7d\xfb\xca\x89\x11\xa4\xcb\xf8\xd6\xda\x59\x1b\xa0\x71\x8d\xd8\xe9\xcb\x30\x14\x67\xea\x6c\x71\xa1\x78\x1c\x49\xb9\xf1\xba\xfc\xef\x03\xf5\xc3\xfa\x61\x39\x48\xdb\x6d\x7a\x91\xc8\x23\x3f\xc7\x3b\xde\x7d\xee\x04\x46\x7e\x42\xeb\x24\x69\xce\xb6\xe3\xd3\x93\x07\xa9\x13\xce\x16\x68\xb7\x52\xe0\x1b\x21\x28\xd7\xfe\xf4\x24\x43\x0f\x09\x78\xe0\xa7\x27\x8c\x69\xc8\x90\x33\x41\x16\x13\xed\xea\x09\x67\x40\x20\x67\x0f\xf9\x0a\x63\xb7\x73\x1e\xb3\xd3\x93\x38\x8e\x4f\x4f\xda\x0a\xec\x0a\xc4\x08\x72\x9f\x92\x95\x7f\x82\x97\xa4\x47\x0f\x57\x6e\x24\xe9\x6c\x3b\x5e\xa1\x87\xbd\xfe\x89\xca\x9d\x47\x7b\x47\x0a\x7b\xca\x15\xac\x50\xb9\xe2\x93\x15\xda\xac\x46\x8f\x05\xc6\x8a\xc8\x3b\x6f\xc1\x18\xa9\x37\xa5\xb2\x38\xc1\x35\xe4\xca\xbb\xe6\xdc\xe5\xe1\xf8\xfe\xf8\x36\x57\x18\xf0\x62\x06\x46\xbe\xb3\x94\x9b\x12\x3d\x66\x51\x14\xde\x16\x1d\xe5\x56\x60\x3d\x8b\x3a\x31\x24\x75\x09\x19\x33\x57\x7a\xaa\x1a\x19\x4a\xaa\xaf\xbd\x4f\x8a\xf1\x16\xed\xaa\x06\x50\xd2\xf9\xf2\xeb\x0b\x78\x91\xbe\x5c\xb3\xa6\xe4\x10\x6d\x83\xfe\x1f\x72\xf4\x5b\xa9\x13\xa9\x37\x3d\x7f\x83\xd6\xe4\x0b\x84\xda\xe9\x43\xd8\x9d\x7b\x80\xdc\x53\x6e\x12\xf0\xc8\x59\xe4\x6d\x8e\xd1\xbf\x73\x71\xa4\xf0\x0e\xd7\xe5\x29\x2b\x07\x3e\x63\x79\x58\x36\x10\x5c\xc7\xd0\x5d\xbe\xfa\x1d\x85\x2f\x23\x63\x38\x29\x7e\x24\x13\x9a\x54\x9b\x90\x5e\xcb\xcd\x2d\x98\xef\xcd\xb2\xfd\x8e\x09\x59\x5c\x4b\x85\x9c\xfd\x55\x7a\x79\xc4\x2f\x2f\xd8\xd7\xf2\x3b\x3c\x68\x2d\x59\xd7\x8c\x53\x04\xe5\xd3\x66\x6c\x11\x92\x5d\x33\x6c\x2e\x89\xbd\xfa\x3a\xf9\x70\xbf\x58\x5e\xdf\x7d\x9e\x7e\xbc\x7d\x73\x33\x7b\x7a\xc5\xa4\x8e\x21\x49\xec\x08\xac\x01\x26\xcd\xeb\xf2\xa3\xa5\x8d\x15\xd9\xc0\xa4\x76\x28\x72\x8b\x6d\x41\x6e\x9c\xb7\x08\x59\x7b\x6e\x0d\x4a\xf9\xd4\x52\xbe\x49\x87\xb1\x9b\xc5\x4f\x2d\x13\xc8\x79\xc7\xce\xd0\x8b\xb3\xca\x55\x67\x33\x4a\xf0\x7d\x31\xdd\x39\x8c\x45\x45\x90\xb0\xb1\x3b\xa2\x74\x10\xde\x58\xca\xd0\xa7\x98\x3b\xc6\x7f\x1e\x5f\x5e\x34\x92\x35\xd9\x2f\x60\x13\x36\x2a\x95\x87\x5c\x55\xdb\x91\x20\xbd\x6e\xd6\x08\x10\x29\xb2\x8b\xf3\x66\x46\x11\x99\xb6\xbf\xc3\x91\xda\x52\x48\x56\xa0\x40\x8b\xca\x5b\x4f\x03\x91\x03\xc6\xb8\xb3\x26\x7c\xa6\x68\x14\xed\x32\xfc\x7e\x96\xee\xa7\xe6\x95\x8b\xc1\x98\x6a\x51\xb5\xb7\x9f\xb1\x25\x78\x14\x22\x6e\x3a\x5b\x44\xa7\x27\xce\xa0\x28\x00\xfe\x67\xd1\x28\x29\xc0\x71\x36\x0e\xe3\x90\xd7\x1e\x37\xbb\x0a\xdd\xef\x0c\x72\x76\x47\x4a\x49\xbd\xb9\x2f\x48\xa2\x62\x95\xf6\x14\xaf\x7d\x92\xc1\xe3\xbd\x86\x2d\x48\x05\xab\x10\xd8\x25\x24\x2a\x14\x9e\x6c\xb5\x2a\x0b\x2c\xfa\xa1\x6d\xc2\x11\x23\x3c\x66\x46\x35\xe8\x1d\x6f\x15\xee\xef\x62\x1c\x75\xc5\xde\xd6\x62\xd0\x21\x85\x59\xdf\xe9\x85\xcd\xa4\xd0\x76\x28\x34\x3c\x31\x7b\xc0\x5d\xf0\xa1\x95\x5e\x0a\x50\x6f\x92\x84\xb4\xfb\xa8\xd5\x2e\x6a\x47\x28\x99\xb0\x97\x2c\x67\xd1\xf5\xa3\x74\xde\x45\x87\x10\xa1\x30\xc4\x81\x0e\x7b\x44\x9c\x41\xe0\xb9\x17\xc3\x31\x86\xeb\x35\x0a\xcf\x59\x34\xa3\x85\x48\x31\xc9\x15\xee\xe5\x41\xc9\xa2\xeb\xf9\xf0\x84\x6a\xd2\x53\x4b\x8e\x33\x25\x75\xfe\x58\xaf\x12\xa4\x3d\x48\x8d\xb6\xb1\x3f\x3e\x8c\xcf\xf2\x91\x19\x6c\x90\x33\x0b\x5a\xa4\x68\xeb\xa4\x8e\xab\x37\x1f\x8f\x5e\x8f\x2e\x7a\xab\xe7\xb9\x52\x73\x52\x52\xec\x38\xbb\x59\xcf\xc8\xcf\x2d\x3a\x2c\x19\xba\x4e\xb4\x76\x25\xdd\xa7\x9b\xcc\xa4\xef\x4e\x85\xa8\xc8\xc8\xee\x38\x1b\xff\x74\x7e\x2b\xbb\xfc\xf1\x47\x8e\xee\x60\xbd\x30\x39\x67\xe3\xf3\xf3\x6c\x18\xa6\x8b\x02\x76\xe3\x38\xfb\x95\x45\x71\x20\x8a\xe8\xff\x2c\xea\x30\x57\x4d\xe0\x11\xfb\xad\xd9\xb3\x25\x95\x67\x78\x1b\xa2\xab\x1b\x3e\xb5\x03\x43\xf9\x88\xcb\x55\xed\x33\x64\x61\xc7\x1c\x7c\xca\x3b\xf4\xd8\x35\x09\x92\x10\x70\x9c\x85\x2a\xdd\x62\x3d\xb2\x3d\x5d\xfb\x1b\x9c\x93\xf5\x9c\xb5\x89\xb0\x66\x9a\x1e\xb6\xb1\xe4\x49\x90\xe2\xec\x7e\x3a\xff\x76\xa8\xd8\x0b\x33\x0c\xb7\x9c\x3c\x07\xd7\x25\xe9\x1a\x30\x43\x6f\xa5\x38\x72\xbe\x0e\x60\x51\xab\xa4\xdf\x4d\x48\x7b\x7c\xf4\x9d\xcb\x06\xa5\xe8\xcb\xdc\xca\xad\x54\xb8\xc1\x6b\x27\x40\x15\x59\xcd\x43\x19\x71\x1d\xe7\x0b\x30\xb0\x92\x4a\x7a\x89\xfd\x80\x81\x24\xe9\xcd\xc4\x6c\x76\xbd\xfc\xfc\xf6\x66\x36\xfd\xbc\xb8\xbe\xfb\x74\x33\xb9\xee\xca\x13\x4b\xe6\x60\x0b\x28\x35\x74\x95\x77\x44\xfe\x17\xa9\xb0\x6a\x67\x7a\x17\xab\xe4\x16\x35\x3a\x37\xb7\xb4\xc2\x0e\x64\xea\xbd\x79\x87\xbe\xa7\xc6\x94\xe1\xd3\xef\x13\x58\x15\x23\x9c\x5d\x9d\x5f\x9d\x77\xe7\x9d\x48\x31\xb8\xfc\xfd\x72\x39\x6f\x4b\xa4\x96\x5e\x82\x9a\xa2\x82\xdd\x02\x05\xe9\xc4\x71\xf6\xba\xb3\xd9\xcb\x0c\x29\xf7\x7b\xe9\x65\x5b\xe8\x72\x21\xd0\xb9\x65\x6a\xd1\xa5\xa4\x92\xaa\x16\xd4\xcf\x1a\xa4\xca\x2d\xb6\xc4\x97\xdd\xbe\x46\x7e\x87\xdd\xbd\x7e\xa8\x65\xf6\xf8\x6a\xfc\x03\x66\x8f\xff\x0b\xb3\x13\xed\x6a\x52\x9c\x96\xbd\x74\x2d\x29\xb9\xe2\x9b\xc8\x44\xd4\x4d\x6a\xcf\x51\x47\x48\xbc\xb0\xdc\x63\xd6\x8f\xfd\xaa\x60\xd5\x3c\xd7\x15\xd6\x6e\x1f\x96\x56\x5b\xf7\xcd\xdd\xf0\xde\x96\xf8\x99\x96\xbb\x6a\xe4\x07\x1b\xa6\x76\xa9\x3f\xde\x31\x1d\xfe\x15\x35\x9d\x62\x28\x81\x65\x98\x44\x81\x8d\xa2\x21\xb9\x13\x16\xcc\x33\xbf\x47\x2f\xe9\xc1\x44\xf9\x1b\x13\x57\x1d\x48\x1b\xec\xe5\xed\x5a\xaf\x97\x1a\x54\x5c\x29\xba\x99\xf3\xf6\x7f\xc0\x6c\xf1\xf4\x2a\x48\x9b\x62\x11\xf7\x2b\x81\xe9\x30\xfc\x41\x45\x88\x87\xe8\xfe\xd8\x9e\x8a\xa5\xe3\x21\x46\x37\x3d\xea\xef\xed\xfa\x3b\x00\x00\xff\xff\xb9\x51\x0c\x3b\xe3\x10\x00\x00")

func coredns_linuxYamlBytes() ([]byte, error) {
	return bindataRead(
		_coredns_linuxYaml,
		"coredns_linux.yaml",
	)
}

func coredns_linuxYaml() (*asset, error) {
	bytes, err := coredns_linuxYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "coredns_linux.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _coredns_windowsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\xdd\x6e\x1b\x37\x13\xbd\x37\xe0\x77\x20\xf6\x43\xee\xbe\xb5\x23\x04\x0e\x5c\xde\xa5\x56\x90\x04\x48\x14\xc1\xb2\x7b\x53\x14\xc5\x88\x3b\xd2\xb2\xe6\x72\x08\x72\x56\x8e\x9a\xfa\xdd\x0b\xee\x8f\xf6\xc7\x2b\xc3\x49\xda\x12\x10\xb4\xe4\x90\x67\x38\x87\x9c\xc3\x01\xa7\x7f\x41\x1f\x34\x59\x29\x76\xb3\xd3\x93\x3b\x6d\x33\x29\x56\xe8\x77\x5a\xe1\x1b\xa5\xa8\xb4\x7c\x7a\x52\x20\x43\x06\x0c\xf2\xf4\x44\x08\x0b\x05\x4a\xa1\xc8\x63\x66\x43\x3b\x10\x1c\x28\x94\xe2\xae\x5c\x63\x1a\xf6\x81\xb1\x38\x3d\x49\xd3\xf4\xf4\xa4\xef\xc0\xaf\x41\x9d\x41\xc9\x39\x79\xfd\x27\xb0\x26\x7b\x76\x77\x19\xce\x34\x9d\xef\x66\x6b\x64\x38\xf8\xbf\x32\x65\x60\xf4\xd7\x64\x70\xe4\xdc\xc0\x1a\x4d\xa8\x3e\x45\xe5\xcd\x5b\x64\xac\x30\xd6\x44\x1c\xd8\x83\x73\xda\x6e\x6b\x67\x69\x86\x1b\x28\x0d\x87\x6e\xdf\xf5\xe6\xe4\x61\xfb\xbe\x34\x18\xf1\x52\x01\x4e\xbf\xf3\x54\xba\x1a\x3d\x15\x49\x12\xff\x3d\x06\x2a\xbd\xc2\x76\x14\x6d\xe6\x48\xdb\x1a\x32\x15\xa1\x66\xaa\xe9\x39\xca\x9a\xaf\x03\x27\x55\x7f\x87\x7e\xdd\x02\x18\x1d\xb8\xfe\xba\x07\x56\xf9\xf3\x3d\x5b\xca\x1e\xa3\x6d\x91\xff\x21\xa2\x7f\xd6\x36\xd3\x76\x3b\xe2\x1b\xac\x25\xae\x10\x5a\xd2\xa7\xb0\x07\xe7\x00\x25\x53\xe9\x32\x60\x94\x22\x61\x5f\x62\xf2\xef\x1c\x1c\x19\xbc\xc6\x4d\xbd\xcb\x86\xc0\x27\x22\x8f\xd3\x26\x2e\xd7\x31\xf4\x50\xae\xff\x40\xc5\xf5\xcd\x98\x4e\x8a\x1f\xc9\x84\x2e\xd5\xae\xc8\x6e\xf4\xf6\x13\xb8\xef\xcd\xb2\xc3\x8a\x2b\xf2\xb8\xd1\x06\xa5\xf8\xab\x66\xf9\x4c\x5e\xbc\x12\x5f\xeb\xef\xd8\xd0\x7b\xf2\xa1\xeb\xe7\x08\x86\xf3\xae\xef\x11\xb2\x7d\xd7\xed\x0e\x49\xbc\xf8\x7a\xf5\xf1\x76\x75\xf3\xf6\xfa\xf7\xf9\xe7\x4f\x6f\x3e\x2c\x1e\x5e\x08\x6d\x53\xc8\x32\x7f\x06\xde\x81\xd0\xee\x75\xfd\xd1\xf3\x26\xaa\x6c\x10\xda\x06\x54\xa5\xc7\xbe\xa1\x74\x81\x3d\x42\xd1\x1f\xdb\x80\x31\x9c\x7b\x2a\xb7\xf9\x34\x76\x37\xf9\xa1\x17\x02\x05\x0e\xe2\x1c\x59\x9d\x37\x54\x9d\x2f\x28\xc3\xf7\xd5\xf0\x60\x33\x1e\x0d\x41\x26\x66\xe1\x88\xd3\x49\x78\xe7\xa9\x40\xce\xb1\x0c\x42\xfe\x34\xbb\x78\xd5\x59\x14\xa8\x1c\xc5\xab\x97\xdd\x88\x21\x72\x7d\x2e\xa3\xbb\xbe\x15\xb2\x35\x18\xb0\xaa\x61\xe2\x61\xe2\x56\x80\x73\xe1\xbc\xbb\x1a\x73\x74\x86\xf6\x05\x7e\xbf\x02\x8f\xd3\xee\x32\xa4\xe0\x5c\x33\xa9\x59\x3b\xce\xc6\x1a\x3c\x89\xb7\x69\xbe\x58\x25\xa7\x27\xc1\xa1\xaa\x00\xfe\xe7\xd1\x19\xad\x20\x48\x31\x8b\xfd\x98\xb3\x8c\xdb\x7d\x83\xce\x7b\x87\x52\x5c\x93\x31\xda\x6e\x6f\x2b\x01\x68\x14\xa3\x3f\x24\x5b\x4e\x0a\xf8\x72\x6b\x61\x07\xda\xc0\x3a\x5e\xda\x1a\x12\x0d\x2a\x26\xdf\xcc\x2a\xa2\x42\x7e\xec\x87\x70\x24\x08\xc6\xc2\x99\x0e\x7d\xc0\x56\x45\xff\x10\xe3\x28\x15\x87\x58\xab\xce\x20\xe1\x17\x63\xd2\xab\x98\xc9\xa0\x1f\xc8\x63\x6c\xa9\xb8\xc3\x7d\xe4\xd0\x6b\xd6\x0a\xcc\x9b\x2c\x23\x1b\x3e\x5b\xb3\x4f\xfa\xb7\x8f\x5c\x5c\x4b\x5e\x8a\xe4\xed\x17\x1d\x38\x24\x8f\x21\xa2\xe8\xa7\x51\xea\x46\x22\x5b\x40\xd4\xb0\x67\xc3\x09\x81\x9b\x0d\x2a\x96\x22\x59\xd0\x4a\xe5\x98\x95\x06\x0f\xf6\xe8\x64\x35\x64\x3e\xb6\xf8\x52\x8c\xdc\x52\x90\xe2\x5e\xdb\x8c\xee\x0f\x14\x28\xb2\x0c\xda\xa2\xef\x18\x48\x1f\xdf\xd0\xba\xe9\x02\xb6\xf1\x8e\x5a\xad\xe2\xaf\xcd\x59\x79\xaf\xed\x68\xd2\xb2\x34\x66\x49\x46\xab\xbd\x14\x1f\x36\x0b\xe2\xa5\xc7\x80\xb5\xec\xd6\x0d\xfc\x36\x48\xf1\xab\x48\x52\x45\x76\x93\xfc\x5f\x24\x03\x19\x68\xd5\x30\x11\xbf\x75\x6b\x76\x64\xca\x02\x3f\xc5\xe3\x1c\x9e\x57\xbb\xdf\xa8\xc5\x69\x3d\xab\x4f\x5e\x11\x57\x2c\x81\x73\x39\xd0\x9a\xa1\xbe\x40\x16\x4f\x58\x8a\xf8\xe4\xf5\x24\x84\xfc\xc8\xd7\x81\xb0\x25\x79\x96\xa2\xaf\x2a\x6d\x6a\x8f\xb0\x9d\x27\x26\x45\x46\x8a\xdb\xf9\xf2\xdb\xa1\x52\x56\x6e\x1a\xee\xe6\xea\x29\xb8\xa1\xe2\xb5\x80\x05\xb2\xd7\xea\xc8\xfe\x06\x80\x46\xef\xd0\x62\x08\x4b\x4f\x6b\x94\xfd\x05\x39\xb3\x7b\x87\x3c\x18\x13\xc2\xd5\x04\x8f\x9f\xa5\x96\x45\x29\x2e\x5f\x5e\xbe\x1c\x8e\x07\x95\x63\xdc\xd4\xfb\x9b\x9b\x65\xdf\xa2\xad\x66\x0d\x66\x8e\x06\xf6\x2b\x54\x64\xb3\x20\xc5\xeb\xc1\x62\xd6\x05\x52\xc9\x07\xeb\x45\xdf\x18\x4a\xa5\x30\x84\x9b\xdc\x63\xc8\xc9\x64\x8d\x3c\xb5\x6d\x03\xda\x94\x1e\x7b\xe6\x8b\xe1\x33\xaa\xbf\x23\xee\xd1\xf3\xdb\x0b\x7b\x76\x39\xfb\x81\xb0\x67\xff\x45\xd8\x99\x0d\x6d\xba\xce\xeb\xd2\xad\xb5\xd4\xd9\xf4\x4d\xe9\xa6\xda\x9a\x68\x44\xd4\x11\x55\xa9\x22\x67\x2c\xc2\x68\x7a\xa3\xa1\xad\x12\x0c\x8d\x2d\xed\xd3\xd6\x66\xe9\xa1\x96\x98\x5e\xdb\x33\x3f\x51\xe1\x35\x75\xe3\xe4\x1b\xde\x7f\x7d\x8e\x3f\xe2\x8f\x8b\xf0\xae\x30\x89\xaa\x5c\x5f\x93\x24\xe6\x6b\x32\x65\x0f\xca\x83\x7b\xa2\x1a\x7f\x4e\x59\xa0\xea\xaa\x39\x6d\x1e\xc5\x3e\xd8\xf3\x2b\x88\xd1\xf3\x3e\xe9\xb8\x71\xf4\x61\x29\xfb\x65\xe7\x62\xf5\xf0\x22\x5a\x3b\x39\x4d\xc7\x5a\xe9\x06\x1a\xf8\x48\x33\xd3\x29\x41\x3c\xb6\xa6\xd1\xb1\x74\x4a\xf3\xdc\x48\x1c\x47\xab\xfe\x0e\x00\x00\xff\xff\xbf\xc0\x5f\x65\x52\x0f\x00\x00")

func coredns_windowsYamlBytes() ([]byte, error) {
	return bindataRead(
		_coredns_windowsYaml,
		"coredns_windows.yaml",
	)
}

func coredns_windowsYaml() (*asset, error) {
	bytes, err := coredns_windowsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "coredns_windows.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _localStorage_linuxYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x4b\x8f\x22\x37\x10\xbe\x23\xf1\x1f\xac\x96\xf6\x12\xad\x61\xb9\x45\xbe\x11\x1e\x9b\x95\x78\x69\x98\x24\x87\x51\x84\x8c\xbb\x00\xef\xb8\x6d\xcb\xae\xee\x84\x6c\xe6\xbf\x47\x6e\xd3\xd0\x0d\x2c\x0c\x52\xd6\x17\x84\xfd\xd5\xc3\x5f\x7d\x55\x6e\x6e\xe5\xef\xe0\xbc\x34\x9a\x91\xa2\xd7\x6e\xbd\x4a\x9d\x32\xb2\x04\x57\x48\x01\x7d\x21\x4c\xae\xb1\xdd\xca\x00\x79\xca\x91\xb3\x76\x8b\x10\xcd\x33\x60\x44\x19\xc1\x15\xb5\x1c\x77\xd4\x3a\x53\xc8\xe0\x02\x1c\xf5\xd1\x92\xf2\xca\x34\xe2\xbd\xe5\x02\x18\x79\xcd\xd7\x40\xfd\xde\x23\x64\xed\x16\xa5\xb4\xdd\xaa\xc7\x77\x6b\x2e\x3a\x3c\xc7\x9d\x71\xf2\x1f\x8e\xd2\xe8\xce\xeb\xcf\xbe\x23\x4d\xb7\xe8\xad\x01\xf9\x31\xbd\x81\xca\x3d\x82\x7b\x32\x0a\x1e\xc9\xcd\x95\x78\x97\x2b\xf0\xac\xdd\xa2\x84\x5b\xf9\xd9\x99\xdc\x7a\x46\x5e\x92\xe4\xcf\x60\xef\xc0\x9b\xdc\x09\x28\xb7\xb4\x49\xc1\x27\x1f\x49\x62\x43\x86\x1e\x41\x63\x61\x54\x9e\x81\x50\x5c\x66\x3e\x5a\x14\xe0\xd6\x25\x7a\x0b\x18\xb0\x4a\xfa\xf2\xf7\x2f\x8e\x62\x17\x20\xf7\xe3\x80\x4e\xad\x91\x1a\xaf\xc6\x8a\x9b\x26\x3d\x0f\xf7\xd3\x3b\x7d\x17\x10\x1c\x37\x6d\x85\x03\x8e\x50\x3a\xfe\x4e\x96\x1e\x8d\xe3\x5b\x38\xf0\x7f\xc5\xef\x01\x20\x14\xf7\x1e\xde\x4d\xc5\xff\x51\xf1\x5f\xa4\x4e\xa5\xde\x3e\x52\xf8\xb5\xd4\x69\xbb\x15\xca\xff\x04\x9b\x12\x5e\x5d\xf6\x46\x0a\x01\x76\x45\x6e\xef\xd2\x98\xcf\xd7\x5f\x41\x60\x94\xd9\xf5\x96\xfa\x81\x7d\xc4\xad\xf5\xdd\x53\x33\x0f\xc1\x2a\xb3\xcf\xe0\xa1\x46\xbe\x15\xd0\x5b\x10\x2c\x2a\xc2\x2a\x29\xb8\x67\xa4\x17\xfe\x7a\x50\x20\xd0\xb8\xf2\x8c\x90\x2c\x94\x7d\xc2\xd7\xa0\xfc\x61\x27\xf0\x6e\x6f\x45\x44\xc8\xac\xe2\x08\x95\x87\x7a\xb6\x61\xa9\xa6\xb7\xbb\xfe\x08\x39\xe6\x5a\xfe\x69\xd4\x60\xf6\x20\xff\x61\xa1\x51\xe0\x4a\x95\xd4\xb3\x20\x84\x92\x57\xd8\x33\x92\x0c\x9c\x44\x29\xb8\xea\xa7\xa9\xd1\x7e\xae\xd5\x3e\xa9\xc3\x08\x31\x36\xd8\x1b\xc7\x48\x32\xfa\x5b\x7a\xf4\xc9\x35\x37\x61\xf2\x94\x52\xea\x04\xe2\x9d\x06\x84\xb2\x2b\x32\x1e\x84\xf8\x90\x4b\x42\x60\xb3\x01\x81\x8c\x24\x33\xb3\x14\x3b\x48\x73\x05\x47\x84\x30\x1a\xb9\xd4\xe0\x4e\xd7\xa1\x77\x75\x11\x97\xcc\xf8\x16\x18\x71\x5c\x8b\x1d\xb8\xee\x75\x38\x2b\x3e\x75\x3e\x75\x7a\xbd\x33\xb3\x45\xae\xd4\xc2\x28\x29\xf6\x8c\x7c\xd9\xcc\x0c\x2e\x1c\x78\x38\xd1\x1c\x12\xcb\x32\xae\xd3\x1a\xc9\xf4\x6e\x46\x94\x78\xe4\x0e\xeb\x1b\x94\x0a\xa3\x37\x72\x5b\xdf\xeb\x02\x8a\x6e\xdc\x3e\xfc\x74\xbe\x7a\xa3\x4f\x90\x38\x78\xa7\xa1\xee\xbe\x91\x40\x24\x26\xda\xd0\x88\xaa\x53\x9d\x05\x8b\x05\xc7\x1d\x6b\xc4\x38\x41\x40\x17\x57\xfc\x2d\xe6\xc3\xd5\xac\x3f\x1d\x2d\x17\xfd\xc1\xa8\xee\xaf\xe0\x2a\x87\xb1\x33\x19\x6b\x16\x74\x23\x41\xa5\xd5\x24\xbb\x38\x88\x09\x54\xad\xd3\x39\x36\x71\x05\x3e\x3c\x2b\x8f\x5c\x2c\x1e\x4c\xb9\x3d\x8b\x78\x21\x94\x8a\xec\x8b\x91\xd4\x7c\x4f\x6a\xc3\x69\x19\x0f\x06\xe1\x1d\xb9\x33\x9e\xca\xb9\xad\xb5\xc1\x46\xff\xd5\x1f\xa2\xb3\x6e\x91\x9e\xa6\xb0\xe1\xb9\x42\x5a\x1e\x33\x92\xa0\xcb\x83\xf8\xeb\x0a\xad\x14\x1c\x2c\xea\xc1\x22\x0d\x87\xd7\x66\x6a\x52\x60\xe4\x0f\x2e\x71\x6c\xdc\x58\x3a\x8f\x03\xa3\x7d\x9e\x05\xf9\xb9\xf8\x3d\x50\xe9\x79\x08\x0a\x10\x0e\x1c\x1c\x1e\x90\x8a\xbf\x26\x29\x81\x85\xdb\x03\xf9\x24\xde\xef\xcd\xe2\xa3\x6d\x4d\xc9\x8c\xfc\x4b\x4f\x85\xfa\x76\xae\x12\x12\xe7\x4b\xd0\xc9\x94\xdb\x84\xbd\x5c\x02\xae\xd8\x34\x6c\x13\x96\x0c\x47\xe3\xfe\x6f\x93\xe7\xd5\xa2\xff\xfc\xeb\x6a\x3c\x7f\x5a\xcd\xe6\xb3\xd5\xe4\xcb\xf2\x79\x34\x5c\xcd\xe6\xc3\xd1\x32\xf9\x78\xc3\x49\xb8\x9d\x4f\xd8\x4b\xf2\xe1\x5b\xe5\x68\x32\x1f\xf4\x27\xab\xe5\xf3\xfc\xa9\xff\x79\x54\xba\x7d\xfb\x10\xbf\x2b\x9a\xeb\xed\x72\xab\x86\x7a\x6b\xb7\xfe\x0b\x00\x00\xff\xff\x2a\xa9\xda\x94\xd3\x0a\x00\x00")

func localStorage_linuxYamlBytes() ([]byte, error) {
	return bindataRead(
		_localStorage_linuxYaml,
		"local-storage_linux.yaml",
	)
}

func localStorage_linuxYaml() (*asset, error) {
	bytes, err := localStorage_linuxYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "local-storage_linux.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServer_linuxAggregatedMetricsReaderYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x8f\xb1\x4e\xc4\x30\x10\x44\xfb\x48\xf9\x07\xcb\x35\x09\xa2\x43\x6e\x29\xe8\x29\x68\x10\xc5\x26\x1e\xe5\x56\xe7\xd8\xd1\xee\x3a\x27\xf8\x7a\xe4\x70\x82\x0e\x89\xab\x5c\xcc\x7b\x33\xde\x33\xe7\x18\xdc\x53\xaa\x6a\x90\x97\x92\xd0\x77\xb4\xf1\x2b\x44\xb9\xe4\xe0\x64\xa2\x79\xa4\x6a\xa7\x22\xfc\x49\xc6\x25\x8f\xe7\x47\x1d\xb9\xdc\xef\x0f\x7d\xb7\xc2\x28\x92\x51\xe8\x3b\xe7\x32\xad\x08\x4e\x3f\xd4\xb0\x06\x5a\x16\xc1\x42\x86\x38\xac\x30\xe1\x59\x07\x01\x45\x48\x23\x13\x4d\x48\x7a\x48\xee\x8f\x85\x9f\x8e\xc1\xca\xb0\x33\x2e\xc1\x79\x93\x0a\xff\x2f\x11\x91\xed\x26\x91\xe2\xca\xf9\xd7\x94\x9a\xd0\xfe\x3c\x38\xda\xf8\x59\x4a\xdd\x34\xb8\x37\x7f\xbd\xee\xda\xe0\xdf\xdb\x84\x40\x4b\x95\x19\x07\xb0\x95\xa8\xfe\xce\xf9\x5c\x22\xf4\x3b\xdf\x21\xd3\x91\x2d\xb0\x16\x25\xd6\xe3\xbd\x90\xcd\xa7\x86\x7c\x05\x00\x00\xff\xff\xcc\xae\x09\x9c\x95\x01\x00\x00")

func metricsServer_linuxAggregatedMetricsReaderYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServer_linuxAggregatedMetricsReaderYaml,
		"metrics-server_linux/aggregated-metrics-reader.yaml",
	)
}

func metricsServer_linuxAggregatedMetricsReaderYaml() (*asset, error) {
	bytes, err := metricsServer_linuxAggregatedMetricsReaderYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server_linux/aggregated-metrics-reader.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServer_linuxAuthDelegatorYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xce\xbf\x4e\xc4\x30\x0c\xc7\xf1\x3d\x52\xde\x21\x2f\x90\xa2\xdb\x50\x36\x60\x60\x3f\x24\x76\x37\xfd\x71\x98\xb6\x71\x65\x3b\x95\xe0\xe9\xd1\xf1\x47\x0c\xe8\x6e\xb5\xfc\xd3\xe7\x9b\x73\x8e\x81\x36\x7e\x86\x1a\x4b\x2b\x49\x47\xaa\x03\x75\x7f\x15\xe5\x0f\x72\x96\x36\xcc\xb7\x36\xb0\xdc\xec\x87\x11\x4e\x87\x18\x66\x6e\x53\x49\x0f\x4b\x37\x87\x1e\x65\xc1\x3d\xb7\x89\xdb\x29\x86\x15\x4e\x13\x39\x95\x18\x52\x6a\xb4\xa2\xa4\x15\xae\x5c\x2d\x1b\x74\x87\x16\x7b\x37\xc7\x5a\xce\x40\x9e\xb0\xe0\x44\x2e\x1a\x83\xca\x82\x23\x5e\xbe\x76\xb4\xf1\xa3\x4a\xdf\xae\xb4\x9c\xdf\xfe\x55\xfc\x99\x17\x10\xeb\xe3\x1b\xaa\x5b\x89\x21\xff\xcc\x9f\xa0\x3b\x57\xdc\xd5\x2a\xbd\xf9\xa5\xea\xdf\xbb\x6d\x54\x51\xd2\xdc\x47\xe4\x6f\x23\x86\xcf\x00\x00\x00\xff\xff\x18\x52\xbb\x9f\x41\x01\x00\x00")

func metricsServer_linuxAuthDelegatorYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServer_linuxAuthDelegatorYaml,
		"metrics-server_linux/auth-delegator.yaml",
	)
}

func metricsServer_linuxAuthDelegatorYaml() (*asset, error) {
	bytes, err := metricsServer_linuxAuthDelegatorYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server_linux/auth-delegator.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServer_linuxAuthReaderYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8f\x31\x4e\xc4\x30\x10\x45\x7b\x4b\xbe\x83\x2f\xe0\xa0\xed\x90\x3b\x68\xe8\x17\x89\x7e\xe2\x7c\x60\xc8\x66\x1c\xcd\x8c\x23\xe0\xf4\x28\x2b\x60\x69\xd8\xfe\xeb\xfd\xf7\x72\xce\x31\xd0\xca\x4f\x50\xe3\x26\x25\xe9\x48\x75\xa0\xee\xaf\x4d\xf9\x93\x9c\x9b\x0c\xf3\xad\x0d\xdc\x6e\xb6\xc3\x08\xa7\x43\x0c\x33\xcb\x54\xd2\xb1\x9d\x70\xcf\x32\xb1\xbc\xc4\xb0\xc0\x69\x22\xa7\x12\x43\x4a\x42\x0b\x4a\x5a\xe0\xca\xd5\xb2\x41\x37\x68\xde\x91\x59\x41\x13\xf4\x67\x63\x2b\x55\x94\x34\xf7\x11\xd9\x3e\xcc\xb1\xc4\xa0\xed\x84\x23\x9e\xcf\x1c\x5a\xf9\x41\x5b\x5f\xaf\x48\xed\xb3\x8b\xce\xe5\x1c\xef\x0e\xd9\x83\x32\xad\xfc\xc7\x00\xe2\x5c\xcf\x80\x5f\x17\xeb\xe3\x1b\xaa\x5b\x89\x21\x7f\xb3\x1e\xa1\x1b\x57\xdc\xd5\xda\xba\xf8\x7f\x49\xd7\x32\xbe\x02\x00\x00\xff\xff\xa4\x39\xd4\xf7\x57\x01\x00\x00")

func metricsServer_linuxAuthReaderYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServer_linuxAuthReaderYaml,
		"metrics-server_linux/auth-reader.yaml",
	)
}

func metricsServer_linuxAuthReaderYaml() (*asset, error) {
	bytes, err := metricsServer_linuxAuthReaderYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server_linux/auth-reader.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServer_linuxMetricsApiserviceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\xcf\x6a\xc3\x30\x0c\xc6\xef\x06\xbf\x83\x5e\xc0\x59\x73\x1b\xbe\xed\x38\xd8\xa0\x90\xd1\xbb\xea\x6a\x45\x04\xff\x41\x92\x03\x79\xfb\xd1\x2e\xc9\x76\x33\xfe\x7d\xdf\x4f\x52\x08\xc1\x3b\x6c\x7c\x21\x51\xae\x25\x02\x36\x16\xba\xb3\x9a\xa0\x71\x2d\xc3\xfc\xaa\x03\xd7\x97\x65\xbc\x92\xe1\xe8\xdd\xcc\xe5\x16\xe1\xed\xfc\x3e\x91\x2c\x9c\xc8\xbb\x4c\x86\x37\x34\x8c\xde\x01\x14\xcc\x14\x61\x4b\x0f\x99\x4c\x38\xe9\x26\xf1\x4e\x1b\xa5\x67\x4c\x7f\xcb\xcf\xf7\x5e\xda\xc2\xe1\xc1\x48\xfe\x88\x36\x4c\x14\x61\xee\x57\x0a\xba\xaa\x51\x7e\xb0\xbb\xd4\xde\x8e\xd2\x31\x01\x60\xd9\x2f\x39\x56\x06\xe0\xa2\x94\xba\xd0\x34\x73\xfb\xfa\x98\x2e\x24\xfc\xbd\x46\x30\xe9\x74\xb8\xce\xc2\x55\xd8\xd6\x4f\x2e\x9c\x7b\x8e\x30\x9e\x4e\xff\x7c\x3b\xde\xfe\x7f\x02\x00\x00\xff\xff\x1b\x61\x3a\xc5\x38\x01\x00\x00")

func metricsServer_linuxMetricsApiserviceYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServer_linuxMetricsApiserviceYaml,
		"metrics-server_linux/metrics-apiservice.yaml",
	)
}

func metricsServer_linuxMetricsApiserviceYaml() (*asset, error) {
	bytes, err := metricsServer_linuxMetricsApiserviceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server_linux/metrics-apiservice.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServer_linuxMetricsServerDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x51\x4d\x8b\x13\x4d\x10\xbe\x0f\xcc\x7f\x78\xc8\x7b\xee\xe4\x15\x41\xa4\x6f\x8b\xeb\x4d\x57\x61\xc1\x7b\x6d\x4f\xc5\x34\xe9\x2f\xaa\x2a\xd1\x41\xfc\xef\x32\x9b\xcd\x4e\x62\xdc\x20\xd8\xb7\xe9\x79\x3e\xfb\x71\xce\xf5\x1d\xb5\xf8\x85\x45\x63\x2d\x1e\xfb\x57\x7d\xb7\x8d\x65\xf0\xb8\x67\xd9\xc7\xc0\x37\x21\xd4\x5d\xb1\xbe\xcb\x6c\x34\x90\x91\xef\x3b\xa0\x50\x66\x8f\xcc\x26\x31\xa8\x53\x96\x3d\xcb\xf1\x5e\x1b\x05\xf6\xd8\xee\x1e\xd8\xe9\xa8\xc6\xb9\xef\x2e\x7c\xa8\x35\x5d\xcd\x66\xb7\xdc\x52\x1d\x33\xff\xb3\x11\x90\xe8\x81\x93\x3e\x92\x81\xed\x5b\x75\xd4\xda\xa5\x82\x36\x0e\x8f\x18\xe5\xc4\xc1\xaa\x3c\x11\x32\x59\xd8\x7c\x38\x95\xb8\x22\x02\x18\xe7\x96\xc8\xf8\xc8\x3e\x8d\x3e\x9d\x97\xe2\x4f\x27\x9d\xbb\x5c\xf5\x01\x9e\x03\x3f\x7e\x9c\x6d\x73\x77\xc5\xc4\x6a\x62\x21\x8b\xb5\x9c\x3a\x39\x6c\x79\xf4\x58\xbc\x93\x68\x31\x50\xba\x19\x86\x5a\xf4\x53\x49\xe3\x62\x06\x01\xb5\x4d\xdc\x2a\x1e\x8b\xf7\xdf\xa3\x9a\x2e\x2e\x25\x4a\x1d\xd8\x49\x4d\xbc\x9c\x76\x90\xc2\xc6\xba\x8c\x75\x95\x49\x8d\xe5\xaf\xe5\x00\x5e\xaf\x39\x98\xc7\xe2\xae\xde\x87\x0d\x0f\xbb\xc4\xcf\xff\xf7\x35\xed\x32\xcf\x0d\xfe\x43\x9e\x8a\x23\x16\x58\x6e\xd0\x8a\x6f\x8c\x40\x05\x4a\x6b\x4e\x23\x76\xca\x58\x4b\xcd\x4e\x83\x4c\x83\x22\x66\xfa\xca\x0a\x2a\xc3\xaa\x0a\x84\x69\x70\xb5\xa4\x11\xa1\x16\xa3\x58\x58\xf4\x28\xed\x9e\x36\xb3\xdc\xdc\x10\x65\x4e\xc8\xb9\xd9\x78\x1b\xc5\xe3\xc7\xcf\xe3\xed\x4c\xf7\xbf\xf3\xff\x3c\x07\x0e\x49\x3c\x84\x4a\xd8\xb0\xac\xce\x61\x7e\xff\xff\xf2\xf5\xf2\xcd\x8c\x3e\x14\xff\x38\x95\x3d\xdf\xef\x85\x90\x38\x3c\xcc\x67\xb2\x8d\xc7\xca\x72\xeb\xbb\xbe\xfb\x15\x00\x00\xff\xff\x78\x8d\x36\x76\xe5\x03\x00\x00")

func metricsServer_linuxMetricsServerDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServer_linuxMetricsServerDeploymentYaml,
		"metrics-server_linux/metrics-server-deployment.yaml",
	)
}

func metricsServer_linuxMetricsServerDeploymentYaml() (*asset, error) {
	bytes, err := metricsServer_linuxMetricsServerDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server_linux/metrics-server-deployment.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServer_linuxMetricsServerServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\x41\x4b\x43\x31\x10\x84\xef\x81\xfc\x87\xe5\xdd\xa3\x88\x3d\x48\xae\x9e\x85\x82\xe2\x7d\x9b\x0e\x12\x9a\x97\x84\xdd\x7d\x0f\xfc\xf7\xd2\x84\x22\x85\xde\x96\x9d\x99\x6f\x26\x84\xe0\x1d\xf7\xfc\x0d\xd1\xdc\x6a\xa4\xfd\xc5\xbb\x4b\xae\xe7\x48\x9f\x90\x3d\x27\x78\xb7\xc2\xf8\xcc\xc6\xd1\x3b\xa2\xca\x2b\x22\xad\x30\xc9\x49\x83\x42\x76\xc8\xed\xaf\x9d\x13\x22\x5d\xb6\x13\x82\xfe\xaa\x61\xbd\x2a\x85\x4f\x28\x3a\xc2\x34\x34\xa9\x30\xe8\x53\x6e\xcf\x13\xb6\x7c\xdc\xd1\x96\x47\xce\x54\x36\x35\xc8\xb0\xe4\x6b\xc9\x62\xb2\x61\xf1\x4e\x3b\xd2\x60\x2b\x0a\x92\x35\xb9\x15\xbd\x69\xe0\xde\x1f\x4d\xed\x4d\x6c\xee\x09\xe3\x8e\x74\x38\xbc\xce\x54\x97\x66\x2d\xb5\x12\xe9\xeb\xfd\x38\x5f\xc6\xf2\x03\x3b\xfe\xfb\xfe\x02\x00\x00\xff\xff\xdc\xe7\x90\x61\x33\x01\x00\x00")

func metricsServer_linuxMetricsServerServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServer_linuxMetricsServerServiceYaml,
		"metrics-server_linux/metrics-server-service.yaml",
	)
}

func metricsServer_linuxMetricsServerServiceYaml() (*asset, error) {
	bytes, err := metricsServer_linuxMetricsServerServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server_linux/metrics-server-service.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _metricsServer_linuxResourceReaderYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\x41\x4b\x03\x31\x10\x85\xef\x81\xfc\x87\xd0\x7b\x5a\xbc\x49\x6e\xea\xc1\x7b\x05\xef\xb3\xd9\xb1\x1d\x77\x37\xb3\xcc\x4c\x56\xf4\xd7\x4b\x1b\x97\x8a\x88\x22\x9e\xf2\x18\xde\x97\xc7\x7b\x31\x46\xef\x60\xa6\x47\x14\x25\x2e\x29\x48\x07\x79\x0b\xd5\x8e\x2c\xf4\x06\x46\x5c\xb6\xc3\xb5\x6e\x89\x77\xcb\x95\x77\x03\x95\x3e\x85\xbb\xb1\xaa\xa1\xec\x79\x44\xef\x26\x34\xe8\xc1\x20\x79\x17\x42\x81\x09\x53\xd0\x57\x35\x9c\xd2\x84\x26\x94\x35\x2a\xca\x82\xe2\x9d\xd4\x11\x35\x79\x17\x03\xcc\x74\x2f\x5c\x67\x3d\x43\x31\x6c\x36\xa7\x57\x50\xb9\x4a\xc6\xf5\x3a\x73\xaf\x4d\x15\xee\xf1\xb3\xdc\xa9\x81\xad\x07\x98\x50\x67\xc8\xcd\xb0\xa0\x74\x2b\x7f\x40\x6b\x62\x24\xfd\x50\x2f\x60\xf9\xe8\xdd\x7f\x5b\xdf\x52\xe9\xa9\x1c\xfe\x54\x9e\x47\xdc\xe3\xd3\xd9\xb8\xd6\xff\x21\xf7\x64\xfb\x66\xec\x5f\x42\xb4\x76\xcf\x98\xad\x8d\xdc\xf0\x07\x94\x85\x32\xde\xe4\xcc\xb5\xd8\xe5\x87\xaf\x68\xb8\x0c\x99\xc2\x50\x3b\x8c\x2d\xc3\xbb\xf7\x00\x00\x00\xff\xff\x4a\x2c\x1d\xe9\x23\x02\x00\x00")

func metricsServer_linuxResourceReaderYamlBytes() ([]byte, error) {
	return bindataRead(
		_metricsServer_linuxResourceReaderYaml,
		"metrics-server_linux/resource-reader.yaml",
	)
}

func metricsServer_linuxResourceReaderYaml() (*asset, error) {
	bytes, err := metricsServer_linuxResourceReaderYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metrics-server_linux/resource-reader.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rolebindingsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x93\x41\x4f\xe3\x30\x10\x85\xef\x96\xfc\x1f\xa2\xde\xdd\xd5\x6a\x2f\xab\x1c\xe1\xc0\xbd\x12\xdc\x27\xc9\xd0\x0e\x71\x3c\xd6\xcc\xa4\x15\xfc\x7a\x94\x96\x40\x69\xd3\x42\xa9\x38\xc5\xb6\x26\xef\xd3\x7b\xa3\x07\x99\x1e\x50\x94\x38\x95\x85\x54\x50\xcf\xa1\xb7\x15\x0b\xbd\x80\x11\xa7\x79\xfb\x5f\xe7\xc4\x7f\xd6\x7f\xbd\x6b\x29\x35\x65\x71\x1b\x7b\x35\x94\x05\x47\xbc\xa1\xd4\x50\x5a\x7a\xd7\xa1\x41\x03\x06\xa5\x77\x45\x91\xa0\xc3\xb2\x68\xfb\x0a\x03\x64\x52\x94\x35\x4a\x18\xae\x11\x2d\x40\xd3\x51\xf2\x4e\x38\xe2\x02\x1f\xb7\xf3\x90\xe9\x4e\xb8\xcf\x67\xf0\xc3\xd8\x11\xfd\x83\xa5\xcf\x6a\xd8\x95\xef\x8c\x4c\x23\x47\xfb\xea\x09\x6b\xd3\xd2\xbb\x70\x19\xe8\x5e\x51\x4e\xb9\xf1\xce\xbb\x10\x82\x77\x57\x64\x37\x19\xda\x68\xe4\x9f\x86\x9a\x93\x09\xc7\x38\xd0\xa4\x8f\xf8\xd9\x82\x6e\x7f\x0a\xc5\x6c\x36\x7c\x05\x95\x7b\xa9\x71\x7c\x4d\xdc\xa0\x0e\xc7\x35\x4a\x35\x3e\x2e\xd1\x2e\x50\x80\x0e\x35\x43\x7d\x2c\x13\x49\x6d\x77\xda\x80\xd5\xab\x49\xc9\x84\xb6\x61\x69\x29\x2d\xdf\x22\x98\x66\xec\xa6\x32\x47\xaa\xe9\x67\xa0\x49\x5d\x4c\x4d\x66\x4a\xa6\xbb\x6b\xe6\xe6\x8c\xf6\x36\x95\x3d\xc8\xf5\x8b\x3d\x57\x8a\x53\xfb\xfd\x95\x36\x1c\x40\xf6\xaa\x30\xf8\xfd\x26\xe7\xb0\x0e\x5f\x40\x5e\x03\x00\x00\xff\xff\x6e\x1e\xfe\x7d\x4d\x04\x00\x00")

func rolebindingsYamlBytes() ([]byte, error) {
	return bindataRead(
		_rolebindingsYaml,
		"rolebindings.yaml",
	)
}

func rolebindingsYaml() (*asset, error) {
	bytes, err := rolebindingsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rolebindings.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _traefik_linuxYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x4f\x8b\xd4\x40\x10\xc5\xef\x03\xf9\x0e\x4d\x60\x8f\x49\x9c\x9b\xf4\x6d\x1d\x03\x8a\xb0\x2e\x8e\x7a\x95\x4a\xf7\x9b\x49\x33\xfd\x27\x54\x55\x06\xc7\x3f\xdf\x5d\xb2\xb3\x9a\x45\x44\xb6\x8f\xaf\xdf\xfb\x55\xbd\xa6\x69\x0a\x9f\xc1\x12\x4a\xb6\x66\x44\x4c\xad\x23\xd5\x88\x36\x94\xee\xbc\xad\x36\xa7\x90\xbd\x35\x6f\x10\xd3\x6e\x24\xd6\x6a\x93\xa0\xe4\x49\xc9\x56\x1b\x63\x32\x25\x58\xa3\x4c\x38\x84\xd3\x6f\x41\x26\x72\xb0\xe6\x34\x0f\x68\xe4\x22\x8a\x54\x6d\x64\x82\x7b\x48\xb8\x85\x62\xcd\xa8\x3a\x89\xed\xba\x9b\xef\xef\x3e\xbd\xea\x3f\xdc\xf5\x1f\xfb\xfd\x97\xdb\xfb\xb7\x3f\x6f\x3a\x51\xd2\xe0\xba\x07\xa3\x74\x8f\xec\x66\xdb\xbe\xdc\xb6\x2f\x5a\x3d\x7e\x5b\x28\x67\x8a\x33\x64\x57\xb2\x22\xab\x35\x3f\x9a\x45\x34\x86\x07\xba\x4e\x59\x0e\x32\x0d\x11\x7e\x59\x6f\xc6\x55\x14\x89\xff\xbb\x4e\x50\x0e\x4e\xfe\x58\x26\x2e\x09\x3a\x62\x5e\xa5\x7f\xe6\x96\xa6\x9c\xa1\x58\x7d\x21\x1f\x19\x22\x7d\xf6\x53\x09\x59\x9f\xe4\x67\xc1\x6b\x1c\x68\x8e\x7a\x3f\x0f\x31\xc8\x08\xbf\x07\x9f\x83\xc3\x53\x64\x48\x74\x84\x35\x35\x53\x76\x23\xb8\x8b\x61\x60\xe2\x4b\xf3\xf8\x1c\xf5\xd5\xa5\x25\x82\x49\x43\xc9\xeb\xe4\xc6\x9c\x70\xb1\xa6\xde\x71\xd0\xe0\x28\xde\x7a\x5f\xb2\xbc\xcf\xf1\x52\xaf\x4b\x94\x69\xc9\x15\xb6\xa6\xee\xbf\x06\x51\xa9\xff\x8e\xe7\xe2\xd1\x70\x89\x68\xd7\x76\xcb\x9f\x48\x24\x0a\x7e\x16\xca\x18\x1c\x0e\x70\x6a\x4d\x7d\x57\xf6\x6e\x84\x9f\x23\xea\x6a\xf3\x2b\x00\x00\xff\xff\x8b\xaf\x45\x93\x72\x02\x00\x00")

func traefik_linuxYamlBytes() ([]byte, error) {
	return bindataRead(
		_traefik_linuxYaml,
		"traefik_linux.yaml",
	)
}

func traefik_linuxYaml() (*asset, error) {
	bytes, err := traefik_linuxYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "traefik_linux.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ccm.yaml":                 ccmYaml,
	"coredns_linux.yaml":       coredns_linuxYaml,
	"coredns_windows.yaml":     coredns_windowsYaml,
	"local-storage_linux.yaml": localStorage_linuxYaml,
	"metrics-server_linux/aggregated-metrics-reader.yaml": metricsServer_linuxAggregatedMetricsReaderYaml,
	"metrics-server_linux/auth-delegator.yaml":            metricsServer_linuxAuthDelegatorYaml,
	"metrics-server_linux/auth-reader.yaml":               metricsServer_linuxAuthReaderYaml,
	"metrics-server_linux/metrics-apiservice.yaml":        metricsServer_linuxMetricsApiserviceYaml,
	"metrics-server_linux/metrics-server-deployment.yaml": metricsServer_linuxMetricsServerDeploymentYaml,
	"metrics-server_linux/metrics-server-service.yaml":    metricsServer_linuxMetricsServerServiceYaml,
	"metrics-server_linux/resource-reader.yaml":           metricsServer_linuxResourceReaderYaml,
	"rolebindings.yaml":                                   rolebindingsYaml,
	"traefik_linux.yaml":                                  traefik_linuxYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"ccm.yaml":                 &bintree{ccmYaml, map[string]*bintree{}},
	"coredns_linux.yaml":       &bintree{coredns_linuxYaml, map[string]*bintree{}},
	"coredns_windows.yaml":     &bintree{coredns_windowsYaml, map[string]*bintree{}},
	"local-storage_linux.yaml": &bintree{localStorage_linuxYaml, map[string]*bintree{}},
	"metrics-server_linux": &bintree{nil, map[string]*bintree{
		"aggregated-metrics-reader.yaml": &bintree{metricsServer_linuxAggregatedMetricsReaderYaml, map[string]*bintree{}},
		"auth-delegator.yaml":            &bintree{metricsServer_linuxAuthDelegatorYaml, map[string]*bintree{}},
		"auth-reader.yaml":               &bintree{metricsServer_linuxAuthReaderYaml, map[string]*bintree{}},
		"metrics-apiservice.yaml":        &bintree{metricsServer_linuxMetricsApiserviceYaml, map[string]*bintree{}},
		"metrics-server-deployment.yaml": &bintree{metricsServer_linuxMetricsServerDeploymentYaml, map[string]*bintree{}},
		"metrics-server-service.yaml":    &bintree{metricsServer_linuxMetricsServerServiceYaml, map[string]*bintree{}},
		"resource-reader.yaml":           &bintree{metricsServer_linuxResourceReaderYaml, map[string]*bintree{}},
	}},
	"rolebindings.yaml":  &bintree{rolebindingsYaml, map[string]*bintree{}},
	"traefik_linux.yaml": &bintree{traefik_linuxYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
